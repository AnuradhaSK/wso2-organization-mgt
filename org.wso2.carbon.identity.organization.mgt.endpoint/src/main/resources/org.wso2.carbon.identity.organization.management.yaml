# Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

swagger: '2.0'
######################################################
# Prolog
######################################################
info:
  version: "1.0.0"
  title: "WSO2 Identity Server Organization Management Rest API"
  description: |
    This document specifies a **Organization Management RESTful API** for WSO2 **Identity Server** .
    It is written with [swagger 2](http://swagger.io/).
  contact:
    name: "WSO2"
    url: "http://wso2.com/products/identity-server/"
    email: "architecture@wso2.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

######################################################
# The fixed parts of the URLs of the API
######################################################

# The schemes supported by the API
schemes:
  - https

# The domain of the API.
# This is configured by the customer during deployment.
# The given host is just an example.
# host: apis.is.com

# The base path of the API.
# Will be prefixed to all paths.
# if the tenant domain is carbon.super base path can be /api/identity/organization-mgt/v1.0 like this too.

basePath: /t/{tenant-domain}/api/identity/organization-mgt/v1.0

# The following media types can be passed as input in message bodies of the API.
# The actual media type must be specified in the Content-Type header field of the request.
# The default is json, i.e. the Content-Type header is not needed to
# be set, but supporting it serves extensibility.
consumes:
  - application/json

# The following media types may be passed as output in message bodies of the API.
# The media type(s) consumable by the requester is specified in the Accept header field
# of the corresponding request.
# The actual media type returned will be specified in the Content-Type header field
# of the of the response.
# The default of the Accept header is json, i.e. there is not needed to
# set the value, but supporting it serves extensibility.
produces:
  - application/json

paths:
  # Endpoint for organization metadata management
  "/organizations":
    post:
      description: |
        This API is used to create the organization defined in the user input.
      x-wso2-request: |
        curl -X POST "https://localhost:9443/api/identity/organization-mgt/v1.0/organizations" -H "accept: application/json" -H "Content-Type: application/json" -d '{"name": "string", "displayName": "string", "description": "string", "parentId": "string", "attributes": [{"key": "string", "value": "string"}], "userStoreConfigs": [{"key": "string", "value": "string"}]}' -k
      x-wso2-curl: |
        curl -X POST \
          https://localhost:9443/api/identity/organization-mgt/v1.0/organizations \
          -H 'Authorization: Basic YWRtaW46YWRtaW4=' \
          -H 'Content-Type: application/json' \
          -H 'Postman-Token: 7db063fc-0728-4397-b928-1390909e7159' \
          -H 'accept: application/json' \
          -H 'cache-control: no-cache' \
          -d '{
            "name": "Hesei",
            "displayName": "Hesei constructions",
            "parentId": "06c1f4e2-3339-44e4-a825-96585e3653b1",
            "description": "EU organization",
            "attributes": [
                {
                    "key": "Type",
                    "value": "partner"
                },
                {
                    "key": "Exp",
                    "value": "2021"
                }
            ],
            "userStoreConfigs": [
                {
                    "key": "RDN",
                    "value": "hesei"
                },
                {
                    "key": "USER_STORE_DOMAIN",
                    "value": "WSO2.COM"
                }
            ]
        }'
      x-wso2-response: |
        {
            "id": "dd02ecdf-a228-4d75-a53e-3a6650177bc9",
            "name": "Hesei",
            "displayName": "Hesei constructions",
            "description": "EU organization",
            "status": "ACTIVE",
            "parent": {
                "id": "06c1f4e2-3339-44e4-a825-96585e3653b1",
                "ref": "/t/carbon.super/api/identity/organization-mgt/v1.0/organizations/06c1f4e2-3339-44e4-a825-96585e3653b1",
                "name": "MAGA",
                "displayName": "MAGA constructions"
            },
            "meta": {
                "created": "2020-09-01T18:37:44.199Z",
                "lastModified": "2020-09-01T18:37:44.199Z",
                "createdBy": {
                    "id": "8686b71c-6d25-45c0-a6be-d1337914205c",
                    "ref": "/t/carbon.super/scim2/Users/8686b71c-6d25-45c0-a6be-d1337914205c"
                },
                "lastModifiedBy": {
                    "id": "8686b71c-6d25-45c0-a6be-d1337914205c",
                    "ref": "/t/carbon.super/scim2/Users/8686b71c-6d25-45c0-a6be-d1337914205c"
                }
            }
        }
      summary: |
        Create a new organization.
      # post parameters:
      parameters:
        - name: organization
          in: body
          description: This represents the organization to be added.
          required: true
          schema:
            $ref: '#/definitions/OrganizationAdd'
      responses:
        201:
          description: Successful Response
          schema:
            $ref: '#/definitions/BasicOrganization'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Organization
    get:
      description: |
        This API is used to search and retrieve organizations created for this tenant which matches the defined search criteria, if any.
      x-wso2-request: |
        curl -X GET "https://localhost:9443/api/identity/organization-mgt/v1.0/organizations?attributes=<COMMA_SEPARATED_ATTRIBUTES_LIST>&$filter=<URL_ENCODED_SEARCH_QUERY>offset=<OFFSET>&limit=<LIMIT>&sortBy=<SORT_BY_FIELD>&sortOrder=<SORT_ORDER>" -H "accept: application/json" -H 'Authorization: Basic YWRtaW46YWRtaW4=' -k
      x-wso2-curl: |
        curl -X GET \
          'https://localhost:9443/api/identity/organization-mgt/v1.0/organizations?attributes=type,locale&offset=0&limit=10&sortBy=parentDisplayName&sortOrder=ASC&$filter=displayName%20eq%20%27Hesei%20constructions%27%20and%20status%20ne%20%27DISABLED%27%20and%20attributeKey%20eq%20%27Exp%27%20and%20attributeValue%20eq%20%272021%27' \
          -H 'Authorization: Basic YWRtaW46YWRtaW4=' \
          -H 'Postman-Token: 8eb7c266-7341-4252-869d-d4d51759f7f5' \
          -H 'accept: application/json' \
          -H 'cache-control: no-cache'
      x-wso2-response: |
        [
            {
                "id": "dd02ecdf-a228-4d75-a53e-3a6650177bc9",
                "name": "Hesei",
                "displayName": "Hesei constructions",
                "description": "EU organization",
                "status": "ACTIVE",
                "parent": {
                    "id": "06c1f4e2-3339-44e4-a825-96585e3653b1",
                    "ref": "/t/carbon.super/api/identity/organization-mgt/v1.0/organizations/06c1f4e2-3339-44e4-a825-96585e3653b1",
                    "name": "MAGA",
                    "displayName": "MAGA constructions"
                },
                "meta": {
                    "created": "2020-09-02 00:07:44.199",
                    "lastModified": "2020-09-02 00:07:44.199",
                    "createdBy": {
                        "id": "8686b71c-6d25-45c0-a6be-d1337914205c",
                        "ref": "/t/carbon.super/scim2/Users/8686b71c-6d25-45c0-a6be-d1337914205c"
                    },
                    "lastModifiedBy": {
                        "id": "8686b71c-6d25-45c0-a6be-d1337914205c",
                        "ref": "/t/carbon.super/scim2/Users/8686b71c-6d25-45c0-a6be-d1337914205c"
                    }
                },
                "attributes": [
                    {
                        "key": "type",
                        "value": "partner"
                    },
                    {
                        "key": "locale",
                        "value": "en_US"
                    }
                ]
            }
        ]
      summary: |
        Retrieve organizations created for this tenant which matches the defined search criteria, if any.
        Allowed search criteria (name, displayName, description, status, parentId, parentName, parentName, parentDisplayName, created, lastModified, createdBy, lastModifiedBy, attributeKey, attributeValue, userStoreConfigKey, userStoreConfigValue).
        Allowed operators (eq, ne, lt, le, gt, ge).
        Allowed complex condition operators (and, or).
        $filter query param value should be URL encoded.
      parameters:
        - in: query
          name: offset
          type: integer
          description: Number of items to be skipped before starting to collect the result set. (Should be 0 or positive)
        - in: query
          name: limit
          type: integer
          description: Max number of items to be returned. (Should be greater than 0)
        - in: query
          name: sortBy
          type: string
          enum: [name, description, displayName, status, lastModified, created, parentName, parentDisplayName]
          description: Criteria to sort by. (name, description, displayName, status, lastModified, created, parentName, parentDisplayName)
        - in: query
          name: sortOrder
          type: string
          enum: [ASC, DESC]
          description: Ascending or Descending order. (ASC, DESC)
        - in: query
          name: attributes
          type: string
          description: Comma separated list of attributes to be returned in the response. ('*' for all)
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Organization'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Organization
  "/organizations/{organization-id}":
    get:
      description: |
        This API is used to get an existing organization identified by the organization Id.
      x-wso2-request: |
        curl -X GET "https://localhost:9443/api/identity/organization-mgt/v1.0/organizations/<ORGANIZATION_ID>" -H "accept: application/json" -H 'Authorization: Basic YWRtaW46YWRtaW4=' -k
      x-wso2-curl: |
        curl -X GET \
          https://localhost:9443/api/identity/organization-mgt/v1.0/organizations/9b7ae6c6-292d-4e10-a184-29fd828bdf6d \
          -H 'Authorization: Basic YWRtaW46YWRtaW4=' \
          -H 'Postman-Token: 0299c25d-08ac-444d-a0c7-a61bf47c5e5c' \
          -H 'accept: application/json' \
          -H 'cache-control: no-cache'
      x-wso2-response: |
        {
            "id": "dd02ecdf-a228-4d75-a53e-3a6650177bc9",
            "name": "Hesei",
            "displayName": "Hesei constructions",
            "description": "EU organization",
            "status": "ACTIVE",
            "parent": {
                "id": "06c1f4e2-3339-44e4-a825-96585e3653b1",
                "ref": "/t/carbon.super/api/identity/organization-mgt/v1.0/organizations/06c1f4e2-3339-44e4-a825-96585e3653b1",
                "name": "MAGA",
                "displayName": "MAGA constructions"
            },
            "meta": {
                "created": "2020-09-02 00:07:44.199",
                "lastModified": "2020-09-02 00:07:44.199",
                "createdBy": {
                    "id": "8686b71c-6d25-45c0-a6be-d1337914205c",
                    "ref": "/t/carbon.super/scim2/Users/8686b71c-6d25-45c0-a6be-d1337914205c",
                    "username": john
                },
                "lastModifiedBy": {
                    "id": "8686b71c-6d25-45c0-a6be-d1337914205c",
                    "ref": "/t/carbon.super/scim2/Users/8686b71c-6d25-45c0-a6be-d1337914205c",
                    "username": john
                }
            },
            "attributes": [
                {
                    "key": "Type",
                    "value": "partner"
                },
                {
                    "key": "Exp",
                    "value": "2021"
                }
            ]
        }
      summary: |
        Get an existing organization, identified by the organization Id.
      parameters:
        - name: organization-id
          in: path
          description: ID of the organization of which, the fields are to be patched.
          required: true
          type: string
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Organization'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Organization
    patch:
      description: |
        This API is used to 'replace' the defined field of the organization identified by the organization Id.
      x-wso2-request: |
        curl -X PATCH "https://localhost:9443/api/identity/organization-mgt/v1.0/organizations/<ORGANIZATION_ID>" -H "accept: application/json" -H "Content-Type: application/json" -H 'Authorization: Basic YWRtaW46YWRtaW4=' -d '[{"op": "string", "path": "string", "value": "string"}]'
      x-wso2-curl: |
        curl -X PATCH \
          https://localhost:9443/api/identity/organization-mgt/v1.0/organizations/9b7ae6c6-292d-4e10-a184-29fd828bdf6d \
          -H 'Authorization: Basic YWRtaW46YWRtaW4=' \
          -H 'Content-Type: application/json' \
          -H 'Postman-Token: 7288a1b2-ba89-4c52-87e4-76eb1875816a' \
          -H 'accept: application/json' \
          -H 'cache-control: no-cache' \
          -d '[
            {
                "op": "add",
                "path": "/attributes/validate",
                "value": "true"
            },
            {
                "op": "remove",
                "path": "/attributes/Exp"
            },
            {
                "op": "replace",
                "path": "/active",
                "value": "false"
            }
        ]'
      x-wso2-response: |
        {}
      summary: |
        This API is used to patch an existing organization, identified by the organization Id.
      parameters:
        - name: organization-id
          in: path
          description:  Id of the organization to be patched.
          required: true
          type: 'string'
        - name: Operations
          in: body
          description:  This represents the patch operation.
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Operation'
      responses:
        204:
          description: Ok
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Organization
    delete:
      description: |
        This API is used to delete an organization, identified by the organization ID.
      x-wso2-request: |
        curl -X DELETE "https://localhost:9443/api/identity/organization-mgt/v1.0/organizations/<ORGANIZATION_ID>" -H "accept: application/json" -H 'Authorization: Basic YWRtaW46YWRtaW4=' -k
      x-wso2-curl: |
        curl -X DELETE \
          https://localhost:9443/api/identity/organization-mgt/v1.0/organizations/9b7ae6c6-292d-4e10-a184-29fd828bdf6d \
          -H 'Authorization: Basic YWRtaW46YWRtaW4=' \
          -H 'Postman-Token: b3d11ef5-b993-40d0-a823-2805b27b55db' \
          -H 'accept: application/json' \
          -H 'cache-control: no-cache'
      x-wso2-response: |
        {}
      summary: |
        Delete an organization by ID.
      parameters:
        - name: organization-id
          in: path
          description: ID of the organization to be deleted.
          required: true
          type: string
      responses:
        204:
          description: Ok
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Organization
  "/organizations/{organization-id}/userstore-configs":
    get:
      description: |
        This API is used to retrieve user store configurations of an organization identified by the organization Id.
      x-wso2-request: |
        curl -X GET "https://localhost:9443/api/identity/organization-mgt/v1.0/organizations/<ORGANIZATION_ID>/userstore-configs" -H "accept: application/json" -H 'Authorization: Basic YWRtaW46YWRtaW4=' -k
      x-wso2-curl: |
        curl -X GET \
          https://localhost:9443/api/identity/organization-mgt/v1.0/organizations/9b7ae6c6-292d-4e10-a184-29fd828bdf6d/userstore-configs \
          -H 'Authorization: Basic YWRtaW46YWRtaW4=' \
          -H 'Postman-Token: d4864a47-100f-4a8d-a889-9ebe54f9dd62' \
          -H 'accept: application/json' \
          -H 'cache-control: no-cache'
      x-wso2-response: |
        [
            {
                "key": "USER_STORE_DOMAIN",
                "value": "wso2.com"
            },
            {
                "key": "DN",
                "value": "ou=hesei,ou=phoenix,ou=Users,dc=wso2,dc=org"
            },
            {
                "key": "RDN",
                "value": "hesei"
            }
        ]
      summary: |
        Get user store configurations of an organization identified by the organization Id.
      parameters:
        - name: organization-id
          in: path
          description: ID of the organization of which, the user store configurations are to be retrieved.
          required: true
          type: string
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/UserStoreConfig'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Organization
    patch:
      description: |
        This API is used to patch user store configurations of an organization, identified by the organization Id.
      x-wso2-request: |
        curl -X PATCH "https://localhost:9443/api/identity/organization-mgt/v1.0/organizations/<ORGANIZATION_ID>/userstore-configs" -H "accept: application/json" -H "Content-Type: application/json" -H 'Authorization: Basic YWRtaW46YWRtaW4=' -d '[{"op": "string", "path": "string", "value": "string"}]'
      x-wso2-curl: |
        curl -X PATCH \
          https://localhost:9443/api/identity/organization-mgt/v1.0/organizations/036bbbbd-74a4-4c6a-9192-13a156bf50c0/userstore-configs \
          -H 'Authorization: Basic YWRtaW46YWRtaW4=' \
          -H 'Content-Type: application/json' \
          -H 'Postman-Token: afae33c3-348e-49a0-a28c-9dc180b1d2ad' \
          -H 'accept: application/json' \
          -H 'cache-control: no-cache' \
          -d '[
            {
                "op": "replace",
                "path": "RDN",
                "value": "Pheonix"
            }
        ]'
      x-wso2-response: |
        {}
      summary: |
        Patch user store configurations of an organization identified by the organization Id.
      parameters:
        - name: organization-id
          in: path
          description: ID of the organization of which, the user store configurations are to be patched.
          required: true
          type: string
        - name: Operations
          in: body
          description:  This represents the patch operation.
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Operation'
      responses:
        204:
          description: Ok
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Organization
  "/organizations/{organization-id}/children":
    get:
      description: |
        This API is used to retrieve children of an organization identified by the organization Id.
      x-wso2-request: |
        curl -X GET "https://localhost:9443/api/identity/organization-mgt/v1.0/organizations/<ORGANIZATION_ID>/children" -H "accept: application/json" -H 'Authorization: Basic YWRtaW46YWRtaW4=' -k
      x-wso2-curl: |
        curl -X GET \
          https://localhost:9443/api/identity/organization-mgt/v1.0/organizations/9b7ae6c6-292d-4e10-a184-29fd828bdf6d/children \
          -H 'Authorization: Basic YWRtaW46YWRtaW4=' \
          -H 'Postman-Token: 95593cbb-54d7-4d03-a3f5-d45c6c61692b' \
          -H 'accept: application/json' \
          -H 'cache-control: no-cache'
      x-wso2-response: |
        ["a5ff5889-8c1b-4699-a0c8-a401db589823","b5ff5889-8c1b-4699-a0c8-a401db589824","c5ff5889-8c1b-4699-a0c8-a401db589825"]
      summary: |
        Get a list of child organization IDs for a given organization.
      parameters:
        - name: organization-id
          in: path
          description: ID of the organization of which, the children are to be retrieved.
          required: true
          type: string
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              type: string
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Organization
  '/organizations/{organization-id}/roles':
    post:
      summary: |
        Create a user role mappings for an organization.
      description: |
        This API is used to create user role mappings for an organization.
      parameters:
        - name: organization-id
          in: path
          description: 'ID of the organization of which, the user role mappings are added.'
          required: true
          type: string
        - name: userRoles
          in: body
          description: This represents user role mappings.
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/UserRoleMapping'
      responses:
        '204':
          description: Ok
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Organization User Roles
    patch:
      summary: |
        Modify user role mappings for an organization.
      description: |
        This API is used to modify user role mappings for an organization.
      parameters:
        - name: organization-id
          in: path
          description: 'ID of the organization of which, the user role mappings are modified.'
          required: true
          type: string
        - name: Operations
          in: body
          description: This represents the patch operation.
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Operation'
      responses:
        '204':
          description: Ok
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Organization User Roles
  '/organizations/{organization-id}/roles/{role-id}/users':
    get:
      summary: |
        Retrieve the list of users who have specific role against an organization.
      description: |
        This API is used to get the user list of an organization with a specific role.
      parameters:
        - name: organization-id
          in: path
          description: 'ID of the organization of which, the users will be returned.'
          required: true
          type: string
        - name: role-id
          in: path
          description: 'ID of the role of which, the user will be returned.'
          required: true
          type: string
      responses:
        '200':
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Organization User Roles
  '/organizations/{organization-id}/roles/{role-id}/users/{user-id}':
    delete:
      summary: |
        Delte an organization user role mapping.
      description: |
        This API is used to delete user role mappings for an organization.
      parameters:
        - name: organization-id
          in: path
          description: 'ID of the organization of which, the user role mappings will be deleted.'
          required: true
          type: string
        - name: role-id
          in: path
          description: 'ID of the role of which, the user will be deleted.'
          required: true
          type: string
        - name: user-id
          in: path
          description: 'ID of the user.'
          required: true
          type: string
      responses:
        '204':
          description: Ok
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Organization User Roles
  "/organizations/import":
    post:
      description: |
        This API is used to create an organization to represent an exisitng organization of the underlying user store. Hence, this will not create any OU in the LDAP.
      x-wso2-request: |
        curl -X POST "https://localhost:9443/api/identity/organization-mgt/v1.0/organizations" -H "accept: application/json" -H "Content-Type: application/json" -d '{"name": "string", "displayName": "string", "description": "string", "parentId": "string", "attributes": [{"key": "string", "value": "string"}], "userStoreConfigs": [{"key": "string", "value": "string"}]}' -k
      x-wso2-curl: |
        curl -X POST \
          https://localhost:9443/api/identity/organization-mgt/v1.0/organizations \
          -H 'Authorization: Basic YWRtaW46YWRtaW4=' \
          -H 'Content-Type: application/json' \
          -H 'Postman-Token: 7db063fc-0728-4397-b928-1390909e7159' \
          -H 'accept: application/json' \
          -H 'cache-control: no-cache' \
          -d '{
            "name": "Hesei",
            "displayName": "Hesei constructions",
            "parentId": "06c1f4e2-3339-44e4-a825-96585e3653b1",
            "description": "EU organization",
            "attributes": [
                {
                    "key": "Type",
                    "value": "partner"
                },
                {
                    "key": "Exp",
                    "value": "2021"
                }
            ],
            "userStoreConfigs": [
                {
                    "key": "RDN",
                    "value": "hesei"
                },
                {
                    "key": "USER_STORE_DOMAIN",
                    "value": "WSO2.COM"
                }
            ]
        }'
      x-wso2-response: |
        {
            "id": "dd02ecdf-a228-4d75-a53e-3a6650177bc9",
            "name": "Hesei",
            "displayName": "Hesei constructions",
            "description": "EU organization",
            "status": "ACTIVE",
            "parent": {
                "id": "06c1f4e2-3339-44e4-a825-96585e3653b1",
                "ref": "/t/carbon.super/api/identity/organization-mgt/v1.0/organizations/06c1f4e2-3339-44e4-a825-96585e3653b1",
                "name": "MAGA",
                "displayName": "MAGA constructions"
            },
            "meta": {
                "created": "2020-09-01T18:37:44.199Z",
                "lastModified": "2020-09-01T18:37:44.199Z",
                "createdBy": {
                    "id": "8686b71c-6d25-45c0-a6be-d1337914205c",
                    "ref": "/t/carbon.super/scim2/Users/8686b71c-6d25-45c0-a6be-d1337914205c"
                },
                "lastModifiedBy": {
                    "id": "8686b71c-6d25-45c0-a6be-d1337914205c",
                    "ref": "/t/carbon.super/scim2/Users/8686b71c-6d25-45c0-a6be-d1337914205c"
                }
            }
        }
      summary: |
        Create an organization without changing the underlying LDAP.
      # post parameters:
      parameters:
        - name: organization
          in: body
          description: This represents the organization to be added.
          required: true
          schema:
            $ref: '#/definitions/OrganizationAdd'
      responses:
        201:
          description: Successful Response
          schema:
            $ref: '#/definitions/BasicOrganization'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - Organization

definitions:
  #-----------------------------------------------------
  # OrganizationAdd Object
  #-----------------------------------------------------
  OrganizationAdd:
    type: object
    required:
      - name
    properties:
      name:
        type: string
      displayName:
        type: string
      description:
        type: string
      parentId:
        type: string
      attributes:
        type: array
        items:
          $ref: '#/definitions/Attribute'
      userStoreConfigs:
        type: array
        items:
          $ref: '#/definitions/UserStoreConfig'
  #-----------------------------------------------------
  # BasicOrganization Object
  #-----------------------------------------------------
  BasicOrganization:
    type: object
    required:
      - id
      - name
      - parent
      - status
      - meta
    properties:
      id:
        type: string
      name:
        type: string
      displayName:
        type: string
      description:
        type: string
      status:
        type: string
        enum: [ACTIVE, DISABLED]
      parent:
        $ref: '#/definitions/Parent'
      meta:
        $ref: '#/definitions/Meta'
  #-----------------------------------------------------
  # Organization Object
  #-----------------------------------------------------
  Organization:
    type: object
    required:
      - id
      - name
      - status
      - meta
      - parent
    properties:
      id:
        type: string
      name:
        type: string
      displayName:
        type: string
      description:
        type: string
      status:
        type: string
        enum: [ACTIVE, DISABLED]
      parent:
        $ref: '#/definitions/Parent'
      meta:
        $ref: '#/definitions/Meta'
      attributes:
        type: array
        items:
          $ref: '#/definitions/Attribute'
  #-----------------------------------------------------
  # Organization Parent Object
  #-----------------------------------------------------
  Parent:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: string
      $ref:
        type: string
      name:
        type: string
      displayName:
        type: string
  #-----------------------------------------------------
  # Organization Meta Object
  #-----------------------------------------------------
  Meta:
    type: object
    required:
      - created
      - lastModified
      - createdBy
      - lastModifiedBy
    properties:
      created:
        type: string
      lastModified:
        type: string
      createdBy:
        $ref: '#/definitions/MetaUser'
      lastModifiedBy:
        $ref: '#/definitions/MetaUser'
  #-----------------------------------------------------
  # Organization MetaUser Object
  #-----------------------------------------------------
  MetaUser:
    type: object
    required:
      - id
      - $ref
    properties:
      id:
        type: string
      $ref:
        type: string
      username:
        type: string
  #-----------------------------------------------------
  # Organization Attribute Object
  #-----------------------------------------------------
  Attribute:
    type: object
    required:
      - key
    properties:
      key:
        type: string
      value:
        type: string
  #-----------------------------------------------------
  # Organization UserStoreConfig Object
  #-----------------------------------------------------
  UserStoreConfig:
    type: object
    required:
      - key
      - value
    properties:
      key:
        type: string
        enum: [USER_STORE_DOMAIN, RDN, DN]
      value:
        type: string
  #-----------------------------------------------------
  # Organization User Role Mapping Object
  #-----------------------------------------------------
  UserRoleMapping:
    type: object
    required:
      - roleId
    properties:
      roleId:
        type: string
      users:
        type: array
        items:
          type: string
  #-----------------------------------------------------
  # User with userId and username
  #-----------------------------------------------------
  User:
    type: object
    required:
      - roleId
    properties:
      userId:
        type: string
      username:
        type: string
  #-----------------------------------------------------
  # Organization Patch Operation Object
  #-----------------------------------------------------
  Operation:
    type: object
    required:
      - op
      - path
    properties:
      op:
        type: string
      path:
        type: string
      value:
        type: string
  #-----------------------------------------------------
  # Error Response  object
  #-----------------------------------------------------
  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string
      description:
        type: string
